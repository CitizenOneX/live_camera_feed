_M={}local a=0x07;local b=0x08;function _M.parse_camera_settings(c)local d={10,25,50,100}local e={'SPOT','CENTER_WEIGHTED','AVERAGE'}local f={}f.quality=d[string.byte(c,1)+1]f.auto_exp_gain_times=string.byte(c,2)f.metering_mode=e[string.byte(c,3)+1]f.exposure=(string.byte(c,4)-128)/64.0;f.shutter_kp=string.byte(c,5)/10.0;f.shutter_limit=string.byte(c,6)<<8|string.byte(c,7)f.gain_kp=string.byte(c,8)/10.0;f.gain_limit=string.byte(c,9)return f end;function _M.camera_capture_and_send(g)quality=g.quality or 50;auto_exp_gain_times=g.auto_exp_gain_times or 0;metering_mode=g.metering_mode or'SPOT'exposure=g.exposure or 0;shutter_kp=g.shutter_kp or 0.1;shutter_limit=g.shutter_limit or 6000;gain_kp=g.gain_kp or 1.0;gain_limit=g.gain_limit or 248.0;for h=1,auto_exp_gain_times,1 do frame.camera.auto{metering=metering_mode,exposure=exposure,shutter_kp=shutter_kp,shutter_limit=shutter_limit,gain_kp=gain_kp,gain_limit=gain_limit}frame.sleep(0.1)end;frame.camera.capture{quality_factor=quality}while not frame.camera.image_ready()do frame.sleep(0.05)end;local i=0;local c=''while true do c=frame.camera.read_raw(frame.bluetooth.max_length()-4)if c~=nil then pcall(frame.bluetooth.send,string.char(a)..c)i=i+string.len(c)frame.sleep(0.0125)else pcall(frame.bluetooth.send,string.char(b))frame.sleep(0.0125)break end end end;return _M